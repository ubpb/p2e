#
# Dieses Skript erstellt das für die Alma Migration erforderliche
# P2E Datei, eine Aleph Ladedatei für alle IZEXCLUDE Titel und
# eine Report Datei mit der wir die Daten auf Plausibilität
# prüfen können.
#
require_relative "base"
require_relative "p2e_destination"

set_default_options do |options|
  options.add :report, "-r", "Also create detailed report"
end

p2e_filename        = "p2e"
iz_exclude_filename = "iz_exclude"
report_filename     = "report"
timestamp           = Time.now.strftime("%Y%m%d-%H%M%S")

IZ_EXCLUDE     = "IZEXCLUDE".freeze
DB_TYPE        = "DB".freeze
PORTFOLIO_TYPE = "Portfolio".freeze

# Select the data
dataset = db.from(Sequel[:pad50][:z00p]).order(Sequel.desc(:z00p_doc_number))
count   = dataset.count
source Metacrunch::DB::Source.new(dataset, rows_per_fetch: 5000)

# Create a progress bar
create_progress_bar(count)

# Pre process
pre_process -> {
  puts "Processing #{count} records..."
  progress_bar.start
}

# Post process hook
post_process -> {
  progress_bar.finish
}

# Increment progress bar
transformation ->(db_row) do
  progress_bar.increment rescue nil
  db_row
end

# Create Marcxml instance and prepare result ds
transformation ->(db_row) do
  {
    marcxml: Metacrunch::Marcxml.parse(db_row[:z00p_str] || db_row[:z00p_ptr]),
    result: {
      id: db_row[:z00p_doc_number],
      type: nil,
      iz_exclude: nil,
      filter_rule: nil,
      status: nil,
      f001: nil,
      f050: nil,
      f051: nil,
      f052: nil,
      f078d: nil,
      f078e: nil,
      f078i: nil,
      f078r: nil,
      f078s: nil,
      f078t: nil,
      f078u: nil,
      f078z: nil,
      title: nil,
      urls: nil
    }
  }
end

# Select only "electronic resources"
transformation ->(data) do
  f050 = data[:marcxml].controlfield("050")

  if f050.present? && f050.value.at(8) == "g"
    data
  else
    nil
  end
end

# Extract some infos for filtering and report
transformation ->(data) do
  # Status
  data[:result][:status] = begin
    _status = "A"
    # gelöscht -> LDR Position 6 == "d"
    _status = "D" if data[:marcxml].controlfield("LDR").value.at(5) == "d"
    # ausgesondert über Feld 078
    _status = "D" if data[:marcxml].datafields("078", ind1: "r").subfields("a").first&.value&.downcase == "aus"
    # Standort Detmold unterdrücken
    detmold_locations = data[:marcxml].datafields("LOC").subfields("n").values
    _status = "D" if detmold_locations.present? && detmold_locations.all?{|v| v == "50"}
    # Interimsaufnahmen unterdrücken
    _status = "D" if data[:marcxml].datafields("537", ind1: "-", ind2: "1").subfields("a").values.any? { |v| v.downcase.include? "interimsaufnahme" }
    # wenn gelöscht via datafield "DEL"
    _status = "D" if data[:marcxml].datafields("DEL").subfields("a").values.include?("Y")

    _status
  end

  # HBZ ID
  data[:result][:f001] = data[:marcxml].datafields("001", ind2: "1").subfields("a")&.first&.value

  # Titel
  data[:result][:title] = data[:marcxml].datafields("331", ind2: "1").subfields("a")&.first&.value

  # URLS
  data[:result][:urls] = data[:marcxml].datafields("655").subfields("u").values.map(&:presence).compact

  # Other stuff
  data[:result][:f050]  = data[:marcxml].controlfield("050")&.value
  data[:result][:f051]  = data[:marcxml].controlfield("051")&.value
  data[:result][:f052]  = data[:marcxml].controlfield("052")&.value
  data[:result][:f078d] = data[:marcxml].datafields("078", ind1: "d")&.subfields("a")&.values
  data[:result][:f078e] = data[:marcxml].datafields("078", ind1: "e")&.subfields("a")&.values
  data[:result][:f078i] = data[:marcxml].datafields("078", ind1: "i")&.subfields("a")&.values
  data[:result][:f078r] = data[:marcxml].datafields("078", ind1: "r")&.subfields("a")&.values
  data[:result][:f078s] = data[:marcxml].datafields("078", ind1: "s")&.subfields("a")&.values
  data[:result][:f078t] = data[:marcxml].datafields("078", ind1: "t")&.subfields("a")&.values
  data[:result][:f078u] = data[:marcxml].datafields("078", ind1: "u")&.subfields("a")&.values
  data[:result][:f078z] = data[:marcxml].datafields("078", ind1: "z")&.subfields("a")&.values

  # return
  data
end

# Set IZEXCLUDE and Type
# ACHTUNG!!! ORDER MATTERS!!!
transformation ->(data) do
  #
  # Rules for "e-books"
  #
  m_iz_exclude_fields = ["dilibri", "s2w-llbdetmold", "s2w-hsspadubpb", "s2w-retropadubpb",
    "s2w-ulbbonn", "s2w-ulbbonndfg", "s2w-zbmed", "vl-ddbk", "vl-ulbd", "vl-ulbms", "zdb-13-soc",
    "zdb-149-hcb", "zdb-15-acm", "zdb-185-std", "zdb-18-boh", "zdb-1-ats", "zdb-1-aws",
    "zdb-1-bec", "zdb-1-cdc", "zdb-1-clf", "zdb-1-clm", "zdb-1-dfl", "zdb-1-dhw", "zdb-1-dlc",
    "zdb-1-dlp", "zdb-1-eai", "zdb-1-eap", "zdb-1-ecc", "zdb-1-eeb", "zdb-1-eio", "zdb-1-elc",
    "zdb-1-elw", "zdb-1-emo", "zdb-1-gcw", "zdb-1-hbe", "zdb-1-hra", "zdb-1-iel", "zdb-1-imf",
    "zdb-1-kbl", "zdb-1-keb", "zdb-1-lcl", "zdb-1-mme", "zdb-1-mml", "zdb-1-mor", "zdb-1-mya",
    "zdb-1-nai", "zdb-1-nel", "zdb-1-nolg", "zdb-1-rse", "zdb-1-rth", "zdb-1-rwf", "zdb-1-scm",
    "zdb-1-sln", "zdb-1-smi", "zdb-1-sot", "zdb-1-tes", "zdb-1-wba", "zdb-1-wfr",
    "zdb-23-dgg-eba", "zdb-23-goa", "zdb-265-afc", "zdb-28-orp", "zdb-2-bhs", "zdb-2-bsp",
    "zdb-2-bum", "zdb-2-cms", "zdb-2-coe", "zdb-2-cwd", "zdb-2-ecf", "zdb-2-eda", "zdb-2-ees",
    "zdb-2-ene", "zdb-2-eng", "zdb-2-esa", "zdb-2-hty", "zdb-2-inr", "zdb-2-lcm", "zdb-2-lcr",
    "zdb-2-mge", "zdb-2-pha", "zdb-2-sbe", "zdb-2-sbl", "zdb-2-scs", "zdb-2-sep", "zdb-2-sgr",
    "zdb-2-shu", "zdb-2-sls", "zdb-2-sma", "zdb-2-smd", "zdb-2-sme", "zdb-2-sna", "zdb-2-sob",
    "zdb-2-sti", "zdb-2-swi", "zdb-2-szr", "zdb-39-joa", "zdb-57-dfs", "zdb-57-dsg", "zdb-57-dvr",
    "zdb-5-vtc", "zdb-5-vww", "zdb-5-web", "zdb-5-wmp", "zdb-5-wmr", "zdb-5-wms", "zdb-5-wmv",
    "zdb-605-preselect", "zdb-94-oab", "zdb-1-cee", "zdb-164-unl", "zdb-1-kec",
    "zdb-1-jmc", "zdb-1-jac", "zdb-1-ja3", "zdb-1-ja2", "zdb-1-ja13", "zdb-1-epc", "zdb-1-eav",
    "zdb-1-dgr", "zdb-1-cup", "zdb-1-cupk", "zdb-1-cep", "zdb-1-bpc", "zdb-1-bep", "zdb-1-aaas3",
    "zdb-1-lycn", "zdb-1-ojd", "zdb-1-pao", "zdb-18-beck-eba", "zdb-1-ewe", "zdb-1-peo",
    "zdb-1-tcn", "zdb-2-lnc"]
  if data[:result][:f078e].any?{|v| m_iz_exclude_fields.include?(v.downcase)} && !(data[:result][:f001] =~ /\AKK/i)
    data[:result][:type] = PORTFOLIO_TYPE
    data[:result][:iz_exclude] = IZ_EXCLUDE
    data[:result][:filter_rule] = "m"
  #
  # Rules for "e-journals"
  #
  elsif data[:result][:f078i].any?{|v| v&.downcase&.strip == "frlzzdb"}
    data[:result][:type] = PORTFOLIO_TYPE
    data[:result][:iz_exclude] = IZ_EXCLUDE
    data[:result][:filter_rule] = "j"
  elsif data[:result][:urls].any?{|v| v =~ /uni\-regensburg\.de\/ezeit/i}
    data[:result][:type] = PORTFOLIO_TYPE
    data[:result][:iz_exclude] = IZ_EXCLUDE
    data[:result][:filter_rule] = "j"
  elsif data[:result][:urls].any?{|v| v =~ /dbis\.uni\-regensburg\.de/i}
    data[:result][:type] = DB_TYPE
    data[:result][:iz_exclude] = nil
    data[:result][:filter_rule] = "j"
  elsif data[:result][:f078z].any?{|v| v&.downcase&.strip == "lzzdb"}
    data[:result][:type] = PORTFOLIO_TYPE
    data[:result][:iz_exclude] = IZ_EXCLUDE
    data[:result][:filter_rule] = "j"
  #
  # The rest...
  #
  else
    data[:result][:type] = PORTFOLIO_TYPE
    data[:result][:iz_exclude] = nil
    data[:result][:filter_rule] = "o"
  end

  data
end

# Prepare data for destination
transformation ->(data) do
  data[:result]
end

# Destination
destination P2EDestination.new(
  p2e_filename: "#{timestamp}-#{p2e_filename}.csv",
  iz_exclude_filename: "#{timestamp}-#{iz_exclude_filename}.csv",
  report_filename: "#{timestamp}-#{report_filename}.csv",
  options: {
    create_report: options[:report]
  }
)

