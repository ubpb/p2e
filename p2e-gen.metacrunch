#
# Dieses Skript erstellt das für die Alma Migration erforderliche
# P2E File.
#
require_relative "base"

set_default_options do |options|
  options.add :verbose, "-v", "Enable verbose mode"
end

report_name = "p2e-gen"
timestamp   = Time.now.strftime("%Y%m%d-%H%M%S")

IZ_EXCLUDE     = "IZEXCLUDE".freeze
DB_TYPE        = "DB".freeze
PORTFOLIO_TYPE = "Portfolio".freeze

# Select the data
dataset = db.from(Sequel[:pad50][:z00p]).order(Sequel.desc(:z00p_doc_number))
count   = dataset.count
source Metacrunch::DB::Source.new(dataset, rows_per_fetch: 5000)

# Create a progress bar
create_progress_bar(count)

# Pre process
pre_process -> {
  puts "Processing #{count} records..."
  progress_bar.start
}

# Post process hook
post_process -> {
  progress_bar.finish
}

# Increment progress bar
transformation ->(db_row) do
  progress_bar.increment rescue nil
  db_row
end

# Create Marcxml instance
transformation ->(db_row) do
  {
    marcxml: Metacrunch::Marcxml.parse(db_row[:z00p_str] || db_row[:z00p_ptr]),
    result: {
      id: "PAD01#{db_row[:z00p_doc_number]}"
    }
  }
end

# Select only "electronic resources"
transformation ->(data) do
  f050 = data[:marcxml].controlfield("050")

  if f050.present? && f050.value.at(8) == "g"
    data
  else
    nil
  end
end

# Extract some infos for filtering and report
transformation ->(data) do
  # Status
  data[:result][:status] = begin
    _status = "A"
    # gelöscht -> LDR Position 6 == "d"
    _status = "D" if data[:marcxml].controlfield("LDR").value.at(5) == "d"
    # ausgesondert über Feld 078
    _status = "D" if data[:marcxml].datafields("078", ind1: "r").subfields("a").first&.value&.downcase == "aus"
    # Standort Detmold unterdrücken
    detmold_locations = data[:marcxml].datafields("LOC").subfields("n").values
    _status = "D" if detmold_locations.present? && detmold_locations.all?{|v| v == "50"}
    # Interimsaufnahmen unterdrücken
    _status = "D" if data[:marcxml].datafields("537", ind1: "-", ind2: "1").subfields("a").values.any? { |v| v.downcase.include? "interimsaufnahme" }
    # wenn gelöscht via datafield "DEL"
    _status = "D" if data[:marcxml].datafields("DEL").subfields("a").values.include?("Y")

    _status
  end

  # HBZ ID
  data[:result][:f001] = data[:marcxml].datafields("001", ind2: "1").subfields("a")&.first&.value

  # Titel
  data[:result][:title] = data[:marcxml].datafields("331", ind2: "1").subfields("a")&.first&.value

  # URLS
  data[:result][:urls] = data[:marcxml].datafields("655").subfields("u").values.map(&:presence).compact

  # Other stuff
  data[:result][:f050]  = data[:marcxml].controlfield("050")&.value
  data[:result][:f051]  = data[:marcxml].controlfield("051")&.value
  data[:result][:f052]  = data[:marcxml].controlfield("052")&.value
  data[:result][:f078d] = data[:marcxml].datafields("078", ind1: "d")&.subfields("a")&.values
  data[:result][:f078e] = data[:marcxml].datafields("078", ind1: "e")&.subfields("a")&.values
  data[:result][:f078i] = data[:marcxml].datafields("078", ind1: "i")&.subfields("a")&.values
  data[:result][:f078r] = data[:marcxml].datafields("078", ind1: "r")&.subfields("a")&.values
  data[:result][:f078s] = data[:marcxml].datafields("078", ind1: "s")&.subfields("a")&.values
  data[:result][:f078t] = data[:marcxml].datafields("078", ind1: "t")&.subfields("a")&.values
  data[:result][:f078u] = data[:marcxml].datafields("078", ind1: "u")&.subfields("a")&.values
  data[:result][:f078z] = data[:marcxml].datafields("078", ind1: "z")&.subfields("a")&.values

  # return
  data
end

# Set IZEXCLUDE and Type
transformation ->(data) do
  data[:result][:type] = PORTFOLIO_TYPE # default

  if data[:result][:f078z].any?{|v| v&.downcase&.strip == "lzzdb"}
    data[:result][:iz_exclude] = IZ_EXCLUDE

    if data[:result][:urls].any?{|v| v =~ /dbis\.uni\-regensburg\.de/i}
      data[:result][:iz_exclude] = nil
      data[:result][:type] = DB_TYPE
    end
  end

  if data[:result][:f078i].any?{|v| v&.downcase&.strip == "frlzzdb"}
    data[:result][:iz_exclude] = IZ_EXCLUDE
  end

  if data[:result][:urls].any?{|v| v =~ /uni\-regensburg\.de\/ezeit/i}
    data[:result][:iz_exclude] = IZ_EXCLUDE
  end

  data
end

# Prepare data for destination
transformation ->(data) do
  dest_data = [
    data[:result][:id],
    data[:result][:iz_exclude],
    data[:result][:type]
  ]

  if options[:verbose]
    dest_data += [
      data[:result][:status],
      data[:result][:f001],
      data[:result][:f050],
      data[:result][:f051],
      data[:result][:f052],
      data[:result][:f078d]&.join("|"),
      data[:result][:f078e]&.join("|"),
      data[:result][:f078i]&.join("|"),
      data[:result][:f078r]&.join("|"),
      data[:result][:f078s]&.join("|"),
      data[:result][:f078t]&.join("|"),
      data[:result][:f078u]&.join("|"),
      data[:result][:f078z]&.join("|"),
      data[:result][:title],
      data[:result][:urls]&.join("|")
    ]
  end

  dest_data
end

# CSV destination
def headers
  headers = [
    "ID",
    "IZEXCLUDE",
    "Type"
  ]

  if options[:verbose]
    headers += [
      "Status",
      "001",
      "050",
      "051",
      "052",
      "078d",
      "078e",
      "078i",
      "078r",
      "078s",
      "078t",
      "078u",
      "078z",
      "Titel",
      "URLs"
    ]
  end

  headers
end

destination Metacrunch::File::CSVDestination.new(
  "#{report_name}-#{timestamp}.csv",
  headers,
  override_existing_file: false,
  csv_options: {
    col_sep: ",",
    force_quotes: options[:verbose]
  }
)

